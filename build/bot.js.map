{"version":3,"sources":["../src/bot.js"],"names":["Discord","require","client","Client","dotenv","axios","ramda","httpClient","create","defaults","timeout","token","process","env","botToken","logChannel","whiteListGuilds","on","console","log","user","tag","msg","content","channel","send","member","hasPermission","message","guild","startsWith","mentions","users","first","Array","from","key","value","id","kick","then","contains","channels","get","author","username","Date","toLocaleDateString","err","error","ban","reason","toLocaleTimeString","login"],"mappings":"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","sourcesContent":["const Discord = require('discord.js')\nconst client = new Discord.Client()\nconst dotenv = require('dotenv')\nconst axios = require('axios')\nconst ramda = require('ramda')\n\nconst httpClient = axios.create()\nhttpClient.defaults.timeout = 5000\n\nconst token = process.env.botToken\nconst logChannel = process.env.logChannel\nconst whiteListGuilds = ['', ''] // dev personal , csecclub\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`)\n})\n\nclient.on('message', msg => {\n  if (msg.content === '!ping') {\n    msg.channel.send('pong')\n  }\n})\n\nclient.on('message', msg => {\n  if (msg.content === '!help') {\n    msg.channel.send(\n      '```\\n !price - Latest price/information of RADS exchanges.\\n !mcap  - To get the market capitalization of RADS```'\n    )\n  }\n})\n\nclient.on('message', msg => {\n  if (msg.content === '!mod') {\n    if (msg.member.hasPermission('KICK_MEMBERS', false, false)) {\n      msg.channel.send(\n        '```\\n!kick - Followed by this command give me a list of users to kick, make sure you @mention them. Example !kick @radiumBot\\n\\n!ban - Followed by this command give me a list of users to ban, make sure you @mention them. Example !ban @radiumBot```'\n      )\n    } else {\n      console.log('ERROR user without permissions tried !mod command')\n    }\n  }\n})\n/*          const embed = {\n              description: `${!ramda.isNil(bittrex)\n                ? `[BITTREX](https://bittrex.com/Market/Index?MarketName=BTC-RADS)${priceTemplateBittrex(\n                    'Bittrex',\n                    bittrexData,\n                    bittrexBTC\n                  )}`\n                : '\\n[BITTREX](https://bittrex.com/Market/Index?MarketName=BTC-RADS) servers are down.'}\n              ${!ramda.isNil(vcc)\n                ? `\\n[VCC](https://vcc.exchange/exchange/basic?currency=btc&coin=rads)${priceTemplateVCC(\n                    'VCC',\n                    vccData,\n                    vccBTC\n                  )}`\n                : '\\n[VCC](https://vcc.exchange/exchange/basic?currency=btc&coin=rads) servers are down.'}\n                  ${!ramda.isNil(upbit)\n                    ? `\\n[UPbit](https://upbit.com/exchange?code=CRIX.UPBIT.BTC-RADS)${priceTemplateUpbit(\n                        'Upbit',\n                        upbitData,\n                        upbitBTC\n                      )}`\n                    : '\\n[UPbit](https://upbit.com/exchange?code=CRIX.UPBIT.BTC-RADS) Servers are down.'}\n                  ${!ramda.isNil(finebox)\n                    ? `\\n[FINEXBOX](https://www.finexbox.com/market/pair/RADS-BTC.html)${priceTemplateFinexbox(\n                        'Finexbox',\n                        fineboxData,\n                        coinMarketCapBTC\n                      )}`\n                    : '\\n[FINEXBOX](https://www.finexbox.com/market/pair/RADS-BTC.html) Servers are down!'}`,\n              color: 4405442\n            }\n            msg.channel.send('', { embed })\n          } */\n\nclient.on('message', message => {\n  if (!message.guild)\n    // Ignore messages that aren't from a guild\n    return\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/stable/class/MessageMentions\n\n    if (message.member.hasPermission('KICK_MEMBERS', false, false)) {\n      if (message.mentions.users.first()) {\n        Array.from(message.mentions.users, ([key, value]) => {\n          const user = value\n          // const user = message.mentions.users.first()\n          // If we have a user mentioned\n\n          // Exclude bot from kicking itself to avoid circular\n          if (user.id !== '653386053356617768') {\n            // Now we get the member from the user\n            const member = message.guild.member(user)\n            // If the member is in the guild\n            if (member && user.id !== `653386053356617768`) {\n              /**\n               * Kick the member\n               * Make sure you run this on a member, not a user!\n               * There are big differences between a user and a member\n               */\n              member\n                .kick('Kicked by bot using command.')\n                .then(() => {\n                  // We let the message author know we were able to kick the person\n                  ramda.contains(message.guild.id, whiteListGuilds)\n                    ? client.channels\n                        .get(logChannel)\n                        .send(\n                          `id:${message.author.id},username:${\n                            message.author.username\n                          }issued command and successfully kicked ${\n                            user.tag\n                          } at ${new Date().toLocaleDateString()}`\n                        )\n                    : message.channel.send(\n                        `id:${message.author.id},username:${\n                          message.author.username\n                        }issued command and successfully kicked ${\n                          user.tag\n                        } at ${new Date().toLocaleDateString()}`\n                      )\n                })\n                .catch(err => {\n                  // An error happened\n                  // This is generally due to the bot not being able to kick the member,\n                  // either due to missing permissions or role hierarchy\n                  ramda.contains(message.guild.id, whiteListGuilds)\n                    ? client.channels\n                        .get(logChannel)\n                        .send(\n                          `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} this might be because I dont have permissions.`\n                        )\n                    : message.channel.send(\n                        `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} this might be because I dont have permissions.`\n                      )\n                  // Log the error\n                  console.error('BOT couldnt KICK maybe permission error.', err)\n                })\n            } else {\n              // The mentioned user isn't in this guild\n              ramda.contains(message.guild.id, whiteListGuilds)\n                ? client.channels\n                    .get(logChannel)\n                    .send(\n                      `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} this might be because user doesnt exist in server.`\n                    )\n                : message.channel.send(\n                    `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} this might be because user doesnt exist in server.`\n                  )\n            }\n            // Otherwise, if no user was mentioned\n          } else {\n            ramda.contains(message.guild.id, whiteListGuilds)\n              ? client.channels\n                  .get(logChannel)\n                  .send(\n                    `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} you cannot kick me using commands.`\n                  )\n              : message.channel.send(\n                  `${message.author.username} issued ${message.content}. ERROR: Unable to kick the ${user.tag} you cannot kick me using commands.`\n                )\n          }\n        })\n      } else {\n        ramda.contains(message.guild.id, whiteListGuilds)\n          ? client.channels\n              .get(logChannel)\n              .send(\n                `${message.author.username} issued ${message.content}. ERROR: Unable to kick this might be because you didnt specify users to kick`\n              )\n          : message.channel.send(\n              `${message.author.username} issued ${message.content}. ERROR: Unable to kick this might be because you didnt specify users to kick`\n            )\n      }\n    } else {\n      console.error(\n        `${message.author.username} issued ${message.content}. ERROR: You dont have permission to do this.`\n      )\n    }\n  }\n})\n\nclient.on('message', message => {\n  if (!message.guild)\n    // Ignore messages that aren't from a guild\n    return\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/stable/class/MessageMentions\n\n    if (message.member.hasPermission(['KICK_MEMBERS', 'BAN_MEMBERS'])) {\n      if (message.mentions.users.first()) {\n        Array.from(message.mentions.users, ([key, value]) => {\n          const user = value\n          // If we have a user mentioned\n          if (user.id !== '653386053356617768') {\n            // Now we get the member from the user\n            const member = message.guild.member(user)\n            // If the member is in the guild\n            if (member) {\n              /**\n               * Ban the member\n               * Make sure you run this on a member, not a user!\n               * There are big differences between a user and a member\n               * Read more about what ban options there are over at\n               * https://discord.js.org/#/docs/main/stable/class/GuildMember?scrollTo=ban\n               */\n              member\n                .ban({\n                  reason: 'They were bad!'\n                })\n                .then(() => {\n                  // We let the message author know we were able to ban the person\n                  ramda.contains(message.guild.id, whiteListGuilds)\n                    ? client.channels\n                        .get(logChannel)\n                        .send(\n                          `id:${message.author.id},username:${\n                            message.author.username\n                          }issued command and successfully banned ${\n                            user.tag\n                          } at ${new Date().toLocaleDateString()}`\n                        )\n                    : message.channel.send(\n                        `id:${message.author.id},username:${\n                          message.author.username\n                        }issued command and successfully banned ${\n                          user.tag\n                        } at ${new Date().toLocaleDateString()}`\n                      )\n                })\n                .catch(err => {\n                  // An error happened\n                  // This is generally due to the bot not being able to ban the member,\n                  // either due to missing permissions or role hierarchy\n                  ramda.contains(message.guild.id, whiteListGuilds)\n                    ? client.channels\n                        .get(logChannel)\n                        .send(\n                          `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} this might be because I dont have permissions.`\n                        )\n                    : message.channel.send(\n                        `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} this might be because I dont have permissions.`\n                      )\n                  // Log the error\n                  console.error('BOT couldnt BAN maybe permission error.', err)\n                })\n            } else {\n              // The mentioned user isn't in this guild\n              ramda.contains(message.guild.id, whiteListGuilds)\n                ? client.channels\n                    .get(logChannel)\n                    .send(\n                      `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} this might be because user doesnt exist in server.`\n                    )\n                : message.channel.send(\n                    `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} this might be because user doesnt exist in server.`\n                  )\n            }\n          } else {\n            // Otherwise, if no user was mentioned\n            ramda.contains(message.guild.id, whiteListGuilds)\n              ? client.channels\n                  .get(logChannel)\n                  .send(\n                    `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} you cannot kick me using commands.`\n                  )\n              : message.channel.send(\n                  `${message.author.username} issued ${message.content}. ERROR: Unable to BAN the ${user.tag} you cannot kick me using commands.`\n                )\n          }\n        })\n      } else {\n        ramda.contains(message.guild.id, whiteListGuilds)\n          ? client.channels\n              .get(logChannel)\n              .send(\n                `${message.author.username} issued ${message.content}. ERROR: Unable to BAN this might be because you didnt specify users to kick`\n              )\n          : message.channel.send(\n              `${message.author.username} issued ${message.content}. ERROR: Unable to BAN this might be because you didnt specify users to kick`\n            )\n      }\n    } else {\n      console.error(\n        `${message.author.username} issued ${message.content}. ERROR: You dont have permission to do this.`\n      )\n    }\n  }\n})\nclient.on('disconnect', () => {\n  console.log(\n    `BOT shutting down at ${new Date().toLocaleDateString()} TIME : ${new Date().toLocaleTimeString()}`\n  )\n})\nclient.login(token)\n"],"file":"bot.js"}